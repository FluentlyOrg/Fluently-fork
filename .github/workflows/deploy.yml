name: Deploy

on:
  push:
    branches:
      - main
      - develop
      - feature/*
      - fix/*
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: false
        default: "main"
      environment:
        description: "Deployment environment (production/staging)"
        required: false
        default: "auto"
        type: choice
        options:
          - auto
          - production
          - staging
      rollback:
        description: "Rollback to previous version"
        required: false
        default: false
        type: boolean
      force_build_backend:
        description: "Force rebuild backend image"
        required: false
        default: false
        type: boolean
      force_build_telegram:
        description: "Force rebuild telegram-bot image"
        required: false
        default: false
        type: boolean
      force_build_ml_api:
        description: "Force rebuild ML API image"
        required: false
        default: false
        type: boolean
      force_build_nginx:
        description: "Force rebuild nginx image"
        required: false
        default: false
        type: boolean
      force_build_all:
        description: "Force rebuild all images"
        required: false
        default: false
        type: boolean

jobs:
  # Determine deployment environment
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      domain: ${{ steps.env.outputs.domain }}
      is_rollback: ${{ github.event.inputs.rollback || 'false' }}
    steps:
      - name: Determine environment
        id: env
        run: |
          BRANCH="${{ github.event.inputs.branch || github.ref_name }}"
          ENV_INPUT="${{ github.event.inputs.environment }}"
          
          # Auto-determine environment based on branch if not manually specified
          if [ "$ENV_INPUT" = "auto" ] || [ -z "$ENV_INPUT" ]; then
            if [ "$BRANCH" = "main" ]; then
              ENVIRONMENT="production"
            else
              ENVIRONMENT="staging"
            fi
          else
            ENVIRONMENT="$ENV_INPUT"
          fi
          
          # Set environment-specific variables
          if [ "$ENVIRONMENT" = "production" ]; then
            DOMAIN="fluently-app.ru"
            HOST="${{ secrets.DEPLOY_HOST }}"
            USERNAME="${{ secrets.DEPLOY_USERNAME }}"
            ZEROTIER_IP="${{ secrets.ZEROTIER_IP }}"
          else
            DOMAIN="fluently-app.online"
            HOST="${{ secrets.STAGING_DEPLOY_HOST }}"
            USERNAME="${{ secrets.STAGING_DEPLOY_USERNAME }}"
            ZEROTIER_IP="${{ secrets.STAGING_ZEROTIER_IP }}"
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "domain=$DOMAIN" >> $GITHUB_OUTPUT
          
          if [ "${{ github.event.inputs.rollback }}" = "true" ]; then
            echo "🔄 Rollback requested for $ENVIRONMENT environment"
          else
            echo "🚀 Deploying branch '$BRANCH' to $ENVIRONMENT environment ($DOMAIN)"
          fi

  # ===========================================
  # BUILD STAGE - Build Docker images based on changes or force flags
  # ===========================================
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      backend-built: ${{ steps.build-flags.outputs.backend-built }}
      telegram-built: ${{ steps.build-flags.outputs.telegram-built }}
      ml-api-built: ${{ steps.build-flags.outputs.ml-api-built }}
      nginx-built: ${{ steps.build-flags.outputs.nginx-built }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for change detection

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine what to build
        id: build-flags
        run: |
          # Initialize change flags
          BACKEND_CHANGED="false"
          TELEGRAM_CHANGED="false"
          ML_API_CHANGED="false"
          NGINX_CHANGED="false"
          
          # Check for file changes if this is a push event
          if [ "${{ github.event_name }}" = "push" ]; then
            # Get the previous commit for comparison
            if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
              BASE_SHA="${{ github.event.before }}"
              echo "🔍 Checking for changes since $BASE_SHA"
              
              # Check for backend changes
              if git diff --name-only $BASE_SHA HEAD | grep -q "^backend/"; then
                BACKEND_CHANGED="true"
                echo "🔨 Backend files changed"
              fi
              
              # Check for telegram bot changes
              if git diff --name-only $BASE_SHA HEAD | grep -q "^telegram-bot/"; then
                TELEGRAM_CHANGED="true"
                echo "🔨 Telegram bot files changed"
              fi
              
              # Check for ML API changes
              if git diff --name-only $BASE_SHA HEAD | grep -q "^analysis/"; then
                ML_API_CHANGED="true"
                echo "🔨 ML API files changed"
              fi
              
              # Check for nginx changes
              if git diff --name-only $BASE_SHA HEAD | grep -q -E "^(frontend-website/|backend/nginx-container/)"; then
                NGINX_CHANGED="true"
                echo "🔨 Nginx files changed"
              fi
            else
              # First commit or force push - build everything
              echo "🔨 First commit or force push detected - building all images"
              BACKEND_CHANGED="true"
              TELEGRAM_CHANGED="true"
              ML_API_CHANGED="true"
              NGINX_CHANGED="true"
            fi
          else
            echo "📝 Manual workflow dispatch - using force build flags only"
          fi
          
          # Determine final build decisions based on changes + force flags
          BUILD_BACKEND="false"
          BUILD_TELEGRAM="false"
          BUILD_ML_API="false"
          BUILD_NGINX="false"
          
          # Force build all images
          if [ "${{ github.event.inputs.force_build_all }}" = "true" ]; then
            BUILD_BACKEND="true"
            BUILD_TELEGRAM="true"
            BUILD_ML_API="true"
            BUILD_NGINX="true"
            echo "🔨 Force building all images"
          else
            # Individual force flags or changes
            if [ "${{ github.event.inputs.force_build_backend }}" = "true" ] || [ "$BACKEND_CHANGED" = "true" ]; then
              BUILD_BACKEND="true"
              if [ "${{ github.event.inputs.force_build_backend }}" = "true" ]; then
                echo "🔨 Force building backend"
              else
                echo "🔨 Building backend (changed)"
              fi
            fi
            
            if [ "${{ github.event.inputs.force_build_telegram }}" = "true" ] || [ "$TELEGRAM_CHANGED" = "true" ]; then
              BUILD_TELEGRAM="true"
              if [ "${{ github.event.inputs.force_build_telegram }}" = "true" ]; then
                echo "🔨 Force building telegram bot"
              else
                echo "🔨 Building telegram bot (changed)"
              fi
            fi
            
            if [ "${{ github.event.inputs.force_build_ml_api }}" = "true" ] || [ "$ML_API_CHANGED" = "true" ]; then
              BUILD_ML_API="true"
              if [ "${{ github.event.inputs.force_build_ml_api }}" = "true" ]; then
                echo "🔨 Force building ML API"
              else
                echo "🔨 Building ML API (changed)"
              fi
            fi
            
            if [ "${{ github.event.inputs.force_build_nginx }}" = "true" ] || [ "$NGINX_CHANGED" = "true" ]; then
              BUILD_NGINX="true"
              if [ "${{ github.event.inputs.force_build_nginx }}" = "true" ]; then
                echo "🔨 Force building nginx"
              else
                echo "🔨 Building nginx (changed)"
              fi
            fi
          fi
          
          # Output build decisions
          echo "backend-built=$BUILD_BACKEND" >> $GITHUB_OUTPUT
          echo "telegram-built=$BUILD_TELEGRAM" >> $GITHUB_OUTPUT
          echo "ml-api-built=$BUILD_ML_API" >> $GITHUB_OUTPUT
          echo "nginx-built=$BUILD_NGINX" >> $GITHUB_OUTPUT
          
          # Summary
          echo "📋 Build Summary:"
          echo "  Backend: $BUILD_BACKEND"
          echo "  Telegram Bot: $BUILD_TELEGRAM"  
          echo "  ML API: $BUILD_ML_API"
          echo "  Nginx: $BUILD_NGINX"

      # Backend Build
      - name: Build and push backend image
        if: steps.build-flags.outputs.backend-built == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: docker.io/fluentlyorg/fluently-backend:latest-develop
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SWAGGER_HOST=localhost:8070

      # Telegram Bot Build  
      - name: Build and push telegram-bot image
        if: steps.build-flags.outputs.telegram-built == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./telegram-bot
          file: ./telegram-bot/Dockerfile
          push: true
          tags: docker.io/fluentlyorg/fluently-telegram-bot:latest-develop
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ML API Build (Most expensive - 15 minutes)
      - name: Build and push ML API image
        if: steps.build-flags.outputs.ml-api-built == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./analysis
          file: ./analysis/distractor_api/Dockerfile
          push: true
          tags: docker.io/fluentlyorg/fluently-ml-api:latest-develop
          cache-from: |
            type=gha
            type=registry,ref=docker.io/fluentlyorg/fluently-ml-api:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=docker.io/fluentlyorg/fluently-ml-api:buildcache,mode=max
          platforms: linux/amd64  # Single platform for faster builds
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # Nginx Build
      - name: Build and push nginx image
        if: steps.build-flags.outputs.nginx-built == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/nginx-container/Dockerfile
          push: true
          tags: docker.io/fluentlyorg/fluently-nginx:latest-develop
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build summary
        run: |
          echo "✅ Build stage completed"
          echo "🔨 Built images:"
          [ "${{ steps.build-flags.outputs.backend-built }}" = "true" ] && echo "  - Backend" || true
          [ "${{ steps.build-flags.outputs.telegram-built }}" = "true" ] && echo "  - Telegram Bot" || true
          [ "${{ steps.build-flags.outputs.ml-api-built }}" = "true" ] && echo "  - ML API" || true
          [ "${{ steps.build-flags.outputs.nginx-built }}" = "true" ] && echo "  - Nginx" || true

  deploy:
    needs: [setup, build]
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug values
        run: |
          echo "🔍 Debug Information:"
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          echo "Domain: ${{ needs.setup.outputs.domain }}"
          echo "Is Rollback: ${{ needs.setup.outputs.is_rollback }}"

      - name: Deploy to ${{ needs.setup.outputs.environment }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ needs.setup.outputs.environment == 'production' && secrets.DEPLOY_HOST || secrets.STAGING_DEPLOY_HOST }}
          username: ${{ needs.setup.outputs.environment == 'production' && secrets.DEPLOY_USERNAME || secrets.STAGING_DEPLOY_USERNAME }}
          key: ${{ needs.setup.outputs.environment == 'production' && secrets.DEPLOY_SSH_KEY || secrets.STAGING_DEPLOY_SSH_KEY }}
          timeout: 20m
          command_timeout: 20m
          script: |
            set -e
            
            BRANCH="${{ github.event.inputs.branch || github.ref_name }}"
            ENVIRONMENT="${{ needs.setup.outputs.environment }}"
            DOMAIN="${{ needs.setup.outputs.domain }}"
            IS_ROLLBACK="${{ needs.setup.outputs.is_rollback }}"
            
            echo "🔄 Starting deployment process for $ENVIRONMENT environment"
            echo "🌐 Domain: $DOMAIN"
            
            # Navigate to project directory and set environment variables
            if [ "$ENVIRONMENT" = "production" ]; then
              cd /home/deploy/Fluently-fork
              export ZEROTIER_IP="${{ secrets.ZEROTIER_IP }}"
              BACKUP_DIR="/home/deploy/backups"
            else
              cd /home/deploy-staging/Fluently-fork
              export ZEROTIER_IP="${{ secrets.STAGING_ZEROTIER_IP }}"
              BACKUP_DIR="/home/deploy-staging/backups"
            fi
            
            # Create backup directory if it doesn't exist
            mkdir -p "$BACKUP_DIR"
            
            # Function to perform health checks
            check_health() {
              echo "🏥 Performing health checks..."
              
              # Wait for services to start
              sleep 10
              
              # Check if backend is healthy
              echo "Checking backend health..."
              for i in {1..10}; do
                if curl -f "http://localhost:8070/health" >/dev/null 2>&1; then
                  echo "✅ Backend is healthy"
                  break
                elif [ $i -eq 10 ]; then
                  echo "❌ Backend health check failed after 10 attempts"
                  return 1
                else
                  echo "⏳ Waiting for backend... (attempt $i/10)"
                  sleep 10
                fi
              done
              
              # Check if ML API is healthy
              echo "Checking ML API health..."
              for i in {1..10}; do
                if docker compose exec -T ml-api curl -f "http://localhost:8001/health" >/dev/null 2>&1; then
                  echo "✅ ML API is healthy"
                  break
                elif [ $i -eq 10 ]; then
                  echo "❌ ML API health check failed after 10 attempts"
                  return 1
                else
                  echo "⏳ Waiting for ML API... (attempt $i/10)"
                  sleep 10
                fi
              done
              
              # Check if PostgreSQL is healthy
              echo "Checking PostgreSQL health..."
              if docker compose exec -T postgres pg_isready -U ${DB_USER:-postgres} >/dev/null 2>&1; then
                echo "✅ PostgreSQL is healthy"
              else
                echo "❌ PostgreSQL health check failed"
                return 1
              fi
              
              # Check if nginx is responding
              echo "Checking nginx health..."
              if curl -f "http://localhost" >/dev/null 2>&1; then
                echo "✅ Nginx is healthy"
              else
                echo "❌ Nginx health check failed"
                return 1
              fi
              
              echo "🎉 All health checks passed!"
              return 0
            }
            
            # Function to rollback
            rollback() {
              echo "🔄 Rolling back to previous version..."
              
              # Find the latest backup
              LATEST_BACKUP=$(ls -t "$BACKUP_DIR"/fluently-backup-*.tar.gz 2>/dev/null | head -1)
              
              if [ -z "$LATEST_BACKUP" ]; then
                echo "❌ No backup found for rollback!"
                return 1
              fi
              
              echo "📦 Found backup: $LATEST_BACKUP"
              
              # Stop current services
              docker compose down --remove-orphans || true
              
              # Create rollback backup of current state
              ROLLBACK_BACKUP="$BACKUP_DIR/fluently-rollback-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
              tar -czf "$ROLLBACK_BACKUP" --exclude=node_modules --exclude=.git . || echo "⚠️ Rollback backup failed"
              
              # Restore from backup
              tar -xzf "$LATEST_BACKUP" --exclude=node_modules --exclude=.git .
              
              # Start services
              docker compose up -d --force-recreate
              
              # Verify rollback
              if check_health; then
                echo "✅ Rollback completed successfully!"
                return 0
              else
                echo "❌ Rollback failed health checks!"
                return 1
              fi
            }
            
            # Handle rollback request
            if [ "$IS_ROLLBACK" = "true" ]; then
              rollback
              exit $?
            fi
            
            # Backup current state (only for production)
            if [ "$ENVIRONMENT" = "production" ]; then
              echo "📦 Creating backup..."
              BACKUP_FILE="$BACKUP_DIR/fluently-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
              tar -czf "$BACKUP_FILE" --exclude=node_modules --exclude=.git . || echo "⚠️ Backup failed but continuing..."
              
              # Keep only last 5 backups
              ls -t "$BACKUP_DIR"/fluently-backup-*.tar.gz 2>/dev/null | tail -n +6 | xargs rm -f 2>/dev/null || true
            fi
            
            # Store current state for potential rollback
            CURRENT_STATE_BACKUP="$BACKUP_DIR/fluently-current-state-$(date +%Y%m%d-%H%M%S).tar.gz"
            tar -czf "$CURRENT_STATE_BACKUP" --exclude=node_modules --exclude=.git . || echo "⚠️ Current state backup failed"
            
            # Update code
            echo "📥 Updating code..."

            # Fix Git ownership issue
            git config --global --add safe.directory $(pwd)

            # Restore any local changes before pulling
            git restore .

            git fetch origin
            git checkout $BRANCH
            git pull origin $BRANCH

            # Create environment-specific .env for backend if it doesn't exist
            if [ ! -f "backend/.env" ]; then
              echo "📝 Creating backend/.env file from example..."
              cp backend/.env.example backend/.env
            fi

            # Update environment variables based on deployment target
            echo "⚙️ Updating environment configuration..."

            # Update ZeroTier IP in backend/.env
            if grep -q "ZEROTIER_IP=" backend/.env; then
              sed -i "s/ZEROTIER_IP=.*/ZEROTIER_IP=$ZEROTIER_IP/" backend/.env
            else
              echo "ZEROTIER_IP=$ZEROTIER_IP" >> backend/.env
            fi

            # Update PUBLIC_URL in backend/.env
            sed -i "s|PUBLIC_URL=.*|PUBLIC_URL=https://$DOMAIN|g" backend/.env

            # Copy .env from backend to root for docker-compose to use
            echo "📋 Copying .env file to root directory for docker-compose..."
            cp backend/.env .env

            # Set Swagger host for the environment
            if [ "$ENVIRONMENT" = "production" ]; then
              export SWAGGER_HOST="${{ secrets.ZEROTIER_IP }}:8070"
            else
              export SWAGGER_HOST="${{ secrets.STAGING_ZEROTIER_IP }}:8070"
            fi
            
            echo "🔧 Setting up environment variables..."
            echo "SWAGGER_HOST=$SWAGGER_HOST"
            

            # Generate nginx config from template
            echo "🔧 Generating nginx configuration from template..."
            if [ "$ENVIRONMENT" = "production" ]; then
              export CERT_NAME="fluently-app-ru"
            else
              export CERT_NAME="fluently-app-online"
            fi

            export DOMAIN
            # Specify which variables to substitute, leaving nginx variables untouched
            envsubst '${DOMAIN} ${CERT_NAME}' < backend/nginx-container/nginx.conf.template > backend/nginx-container/default.conf

            echo "Generated nginx config for $DOMAIN with cert $CERT_NAME"

            echo "🐳 Pulling latest images and starting containers..."
            # Stop services first
            docker compose down --remove-orphans || true

            # Clean up Docker networks to prevent conflicts
            echo "🧹 Cleaning up Docker networks..."
            
            # Remove project-specific networks if they exist
            docker network rm fluently-fork_fluently_network 2>/dev/null || true
            docker network rm fluently_network 2>/dev/null || true
            
            # Prune unused networks
            docker network prune -f || true
            
            echo "✅ Network cleanup completed"

            # Pull latest images instead of building
            echo "📥 Pulling latest Docker images..."
            docker compose pull
            
            # Start services with force recreate
            echo "🚀 Starting services..."
            docker compose up -d --force-recreate

            # Perform health checks
            if check_health; then
              echo "🎉 Deployment completed successfully!"
              echo "🌐 Application available at: https://$DOMAIN"
              
              # Show running containers
              echo "📋 Running containers:"
              docker compose ps
              
              # Cleanup old images (keep last 3)
              echo "🧹 Cleaning up old Docker images..."
              docker image prune -f || true
              
              # Remove current state backup since deployment was successful
              rm -f "$CURRENT_STATE_BACKUP" || true
              
            else
              echo "❌ Deployment failed health checks! Starting rollback..."
              
              # Restore from current state backup
              echo "🔄 Restoring previous state..."
              docker compose down --remove-orphans || true
              tar -xzf "$CURRENT_STATE_BACKUP" --exclude=node_modules --exclude=.git . || echo "⚠️ Restore failed"
              docker compose up -d --force-recreate
              
              # Cleanup failed backup
              rm -f "$CURRENT_STATE_BACKUP" || true
              
              echo "❌ Deployment failed and rollback attempted"
              exit 1
            fi

