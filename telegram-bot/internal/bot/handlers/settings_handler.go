package handlers

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v3"

	"telegram-bot/internal/bot/fsm"
	"telegram-bot/internal/domain"
)

// SettingsMessageID stores the message ID for the settings message to update it
const SettingsMessageID = "settings_message_id"

// HandleSettingsCommand handles the /settings command
func (s *HandlerService) HandleSettingsCommand(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Get current user progress for settings
	userProgress, err := s.GetUserProgress(ctx, userID)
	if err != nil {
		s.logger.Error("Failed to get user progress", zap.Error(err))
		return err
	}

	// Set user state to settings
	if err := s.SetStateIfDifferent(ctx, userID, fsm.StateSettings); err != nil {
		s.logger.Error("Failed to set settings state", zap.Error(err))
		return err
	}

	// Send initial settings message
	return s.sendSettingsMessage(ctx, c, userID, userProgress, "")
}

// sendSettingsMessage sends or updates the settings message
func (s *HandlerService) sendSettingsMessage(ctx context.Context, c tele.Context, userID int64, userProgress *domain.UserProgress, statusMessage string) error {
	// Create settings message
	settingsText := "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n" +
		fmt.Sprintf("üî§ –£—Ä–æ–≤–µ–Ω—å CEFR: *%s*\n", formatCEFRLevel(userProgress.CEFRLevel)) +
		fmt.Sprintf("üìö –°–ª–æ–≤ –≤ –¥–µ–Ω—å: *%d*\n", userProgress.WordsPerDay) +
		fmt.Sprintf("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: *%s*\n", formatNotificationTime(userProgress.NotificationTime))

	if statusMessage != "" {
		settingsText += "\n" + statusMessage
	}

	settingsText += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"

	// Create settings keyboard based on current state
	var keyboard *tele.ReplyMarkup

	// Check if we're in a specific settings sub-state
	currentState, err := s.stateManager.GetState(ctx, userID)
	if err != nil {
		s.logger.Error("Failed to get current state", zap.Error(err))
		currentState = fsm.StateSettings
	}

	switch currentState {
	case fsm.StateSettingsWordsPerDay, fsm.StateSettingsWordsPerDayInput:
		// Show word count options
		keyboard = &tele.ReplyMarkup{
			InlineKeyboard: [][]tele.InlineButton{
				{
					{Text: "5 —Å–ª–æ–≤", Data: "settings:words:5"},
					{Text: "10 —Å–ª–æ–≤", Data: "settings:words:10"},
					{Text: "15 —Å–ª–æ–≤", Data: "settings:words:15"},
				},
				{
					{Text: "20 —Å–ª–æ–≤", Data: "settings:words:20"},
					{Text: "25 —Å–ª–æ–≤", Data: "settings:words:25"},
					{Text: "30 —Å–ª–æ–≤", Data: "settings:words:30"},
				},
				{{Text: "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", Data: "settings:words:custom"}},
				{{Text: "–û—Ç–º–µ–Ω–∞", Data: "settings:back"}},
			},
		}
	case fsm.StateSettingsNotifications:
		// Show time options
		keyboard = &tele.ReplyMarkup{
			InlineKeyboard: [][]tele.InlineButton{
				{
					{Text: "08:00", Data: "settings:time:08:00"},
					{Text: "09:00", Data: "settings:time:09:00"},
					{Text: "10:00", Data: "settings:time:10:00"},
				},
				{
					{Text: "12:00", Data: "settings:time:12:00"},
					{Text: "15:00", Data: "settings:time:15:00"},
					{Text: "18:00", Data: "settings:time:18:00"},
				},
				{
					{Text: "20:00", Data: "settings:time:20:00"},
					{Text: "21:00", Data: "settings:time:21:00"},
					{Text: "22:00", Data: "settings:time:22:00"},
				},
				{{Text: "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", Data: "settings:time:custom"}},
				{{Text: "–û—Ç–∫–ª—é—á–∏—Ç—å", Data: "settings:time:disabled"}},
				{{Text: "–û—Ç–º–µ–Ω–∞", Data: "settings:back"}},
			},
		}
	case fsm.StateSettingsCEFRLevel:
		// Show CEFR level options
		keyboard = &tele.ReplyMarkup{
			InlineKeyboard: [][]tele.InlineButton{
				{
					{Text: "A1 - –ù–∞—á–∏–Ω–∞—é—â–∏–π", Data: "settings:cefr:A1"},
					{Text: "A2 - –≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π", Data: "settings:cefr:A2"},
				},
				{
					{Text: "B1 - –°—Ä–µ–¥–Ω–∏–π", Data: "settings:cefr:B1"},
					{Text: "B2 - –í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ", Data: "settings:cefr:B2"},
				},
				{
					{Text: "C1 - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", Data: "settings:cefr:C1"},
					{Text: "C2 - –í —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–µ", Data: "settings:cefr:C2"},
				},
				{{Text: "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", Data: "settings:cefr:test"}},
				{{Text: "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", Data: "settings:cefr:custom"}},
				{{Text: "–û—Ç–º–µ–Ω–∞", Data: "settings:back"}},
			},
		}
	default:
		// Default settings keyboard
		keyboard = &tele.ReplyMarkup{
			InlineKeyboard: [][]tele.InlineButton{
				{{Text: "üî§ –£—Ä–æ–≤–µ–Ω—å CEFR", Data: "settings:cefr_level"}},
				{{Text: "üìö –°–ª–æ–≤ –≤ –¥–µ–Ω—å", Data: "settings:words_per_day"}},
				{{Text: "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", Data: "settings:notifications"}},
				{{Text: "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", Data: "menu:main"}},
			},
		}
	}

	// Check if we have a stored message ID to edit
	if messageID, err := s.stateManager.GetTempData(ctx, userID, fsm.TempDataSettings); err == nil {
		if msgID, ok := messageID.(int); ok {
			// Try to edit existing message
			if _, err := c.Bot().Edit(&tele.Message{ID: msgID, Chat: c.Message().Chat}, settingsText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard); err == nil {
				return nil
			}
		}
	}

	// Send new message if editing failed or no stored message ID
	if err := c.Send(settingsText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard); err != nil {
		return err
	}

	// For now, we'll just send a new message each time since getting message ID is complex
	// In a production environment, you might want to implement a more sophisticated approach
	return nil
}

// HandleSettingsWordsPerDayCallback handles words per day settings callback
func (s *HandlerService) HandleSettingsWordsPerDayCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Set state to words per day selection
	if err := s.stateManager.SetState(ctx, userID, fsm.StateSettingsWordsPerDay); err != nil {
		s.logger.Error("Failed to set words per day state", zap.Error(err))
		return err
	}

	// Get current user progress
	userProgress, err := s.GetUserProgress(ctx, userID)
	if err != nil {
		s.logger.Error("Failed to get user progress", zap.Error(err))
		return err
	}

	statusText := fmt.Sprintf("üìö *–°–ª–æ–≤ –≤ –¥–µ–Ω—å*\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: *%d* —Å–ª–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:", userProgress.WordsPerDay)

	// Update the settings message
	return s.sendSettingsMessage(ctx, c, userID, userProgress, statusText)
}

// HandleSettingsNotificationsCallback handles notifications settings callback
func (s *HandlerService) HandleSettingsNotificationsCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Set state to notifications settings
	if err := s.stateManager.SetState(ctx, userID, fsm.StateSettingsNotifications); err != nil {
		s.logger.Error("Failed to set notifications state", zap.Error(err))
		return err
	}

	// Get current user progress
	userProgress, err := s.GetUserProgress(ctx, userID)
	if err != nil {
		s.logger.Error("Failed to get user progress", zap.Error(err))
		return err
	}

	currentTime := formatNotificationTime(userProgress.NotificationTime)
	statusText := fmt.Sprintf("üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*\n\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: *%s*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", currentTime)

	// Update the settings message
	return s.sendSettingsMessage(ctx, c, userID, userProgress, statusText)
}

// HandleSettingsCEFRLevelCallback handles CEFR level settings callback
func (s *HandlerService) HandleSettingsCEFRLevelCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Set state to CEFR level settings
	if err := s.stateManager.SetState(ctx, userID, fsm.StateSettingsCEFRLevel); err != nil {
		s.logger.Error("Failed to set CEFR level state", zap.Error(err))
		return err
	}

	// Get current user progress
	userProgress, err := s.GetUserProgress(ctx, userID)
	if err != nil {
		s.logger.Error("Failed to get user progress", zap.Error(err))
		return err
	}

	currentLevel := formatCEFRLevel(userProgress.CEFRLevel)
	statusText := fmt.Sprintf("üî§ *–£—Ä–æ–≤–µ–Ω—å CEFR*\n\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: *%s*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:", currentLevel)

	// Update the settings message
	return s.sendSettingsMessage(ctx, c, userID, userProgress, statusText)
}

// HandleSettingsWordsPerDayInputMessage handles words per day input messages
func (s *HandlerService) HandleSettingsWordsPerDayInputMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	text := strings.TrimSpace(c.Text())

	// Parse the number
	wordsPerDay, err := strconv.Atoi(text)
	if err != nil || wordsPerDay < 1 || wordsPerDay > 100 {
		return c.Send("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
	}

	// Get current user progress
	userProgress, err := s.GetUserProgress(ctx, userID)
	if err != nil {
		s.logger.Error("Failed to get user progress", zap.Error(err))
		return err
	}

	// Update words per day
	userProgress.WordsPerDay = wordsPerDay

	// Save to backend
	if err := s.UpdateUserProgress(ctx, userID, userProgress); err != nil {
		s.logger.Error("Failed to update user progress", zap.Error(err))
		return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// Return to settings with success message
	if err := s.stateManager.SetState(ctx, userID, fsm.StateSettings); err != nil {
		s.logger.Error("Failed to set settings state", zap.Error(err))
		return err
	}

	statusMessage := fmt.Sprintf("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ *%d*", wordsPerDay)
	return s.sendSettingsMessage(ctx, c, userID, userProgress, statusMessage)
}

// HandleSettingsTimeInputMessage handles time input messages
func (s *HandlerService) HandleSettingsTimeInputMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	text := strings.TrimSpace(c.Text())

	// Validate time format (HH:MM)
	if !isValidTimeFormat(text) {
		return c.Send("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)")
	}

	// Get current user progress
	userProgress, err := s.GetUserProgress(ctx, userID)
	if err != nil {
		s.logger.Error("Failed to get user progress", zap.Error(err))
		return err
	}

	// Update notification time
	userProgress.NotificationTime = text

	// Save to backend
	if err := s.UpdateUserProgress(ctx, userID, userProgress); err != nil {
		s.logger.Error("Failed to update user progress", zap.Error(err))
		return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// Return to settings with success message
	if err := s.stateManager.SetState(ctx, userID, fsm.StateSettings); err != nil {
		s.logger.Error("Failed to set settings state", zap.Error(err))
		return err
	}

	statusMessage := fmt.Sprintf("‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ *%s*", text)
	return s.sendSettingsMessage(ctx, c, userID, userProgress, statusMessage)
}

// HandleSettingsCEFRLevelInputMessage handles CEFR level input messages
func (s *HandlerService) HandleSettingsCEFRLevelInputMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	text := strings.TrimSpace(c.Text())

	// Validate CEFR level
	validLevels := map[string]bool{"A1": true, "A2": true, "B1": true, "B2": true, "C1": true, "C2": true}
	if !validLevels[text] {
		return c.Send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å CEFR. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ A1, A2, B1, B2, C1 –∏–ª–∏ C2.")
	}

	// Get current user progress
	userProgress, err := s.GetUserProgress(ctx, userID)
	if err != nil {
		s.logger.Error("Failed to get user progress", zap.Error(err))
		return err
	}

	// Update CEFR level
	userProgress.CEFRLevel = text

	// Save to backend
	if err := s.UpdateUserProgress(ctx, userID, userProgress); err != nil {
		s.logger.Error("Failed to update user progress", zap.Error(err))
		return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// Return to settings with success message
	if err := s.stateManager.SetState(ctx, userID, fsm.StateSettings); err != nil {
		s.logger.Error("Failed to set settings state", zap.Error(err))
		return err
	}

	statusMessage := fmt.Sprintf("‚úÖ –£—Ä–æ–≤–µ–Ω—å CEFR –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *%s*", text)
	return s.sendSettingsMessage(ctx, c, userID, userProgress, statusMessage)
}

// HandleSettingsMenuCallback handles settings menu callback
func (s *HandlerService) HandleSettingsMenuCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// This is the same as the settings command
	return s.HandleSettingsCommand(ctx, c, userID, currentState)
}

// HandleSettingsBackCallback handles the back button in settings
func (s *HandlerService) HandleSettingsBackCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Return to main settings menu
	if err := s.stateManager.SetState(ctx, userID, fsm.StateSettings); err != nil {
		s.logger.Error("Failed to set settings state", zap.Error(err))
		return err
	}

	// Get current user progress
	userProgress, err := s.GetUserProgress(ctx, userID)
	if err != nil {
		s.logger.Error("Failed to get user progress", zap.Error(err))
		return err
	}

	// Clear any temporary data
	s.stateManager.ClearTempData(ctx, userID, SettingsMessageID)

	// Send clean settings message
	return s.sendSettingsMessage(ctx, c, userID, userProgress, "")
}

// HandleSettingsWordsCallback handles words per day selection callbacks
func (s *HandlerService) HandleSettingsWordsCallback(ctx context.Context, c tele.Context, userID int64, data string) error {
	parts := strings.Split(data, ":")
	if len(parts) != 3 {
		return c.Send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
	}

	value := parts[2]

	if value == "custom" {
		// Set state to input mode (direct transition from settings)
		if err := s.stateManager.SetState(ctx, userID, fsm.StateSettingsWordsPerDayInput); err != nil {
			s.logger.Error("Failed to set words per day input state", zap.Error(err))
			return err
		}
		return c.Send("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å (–æ—Ç 1 –¥–æ 100):")
	}

	// Parse the number
	wordsPerDay, err := strconv.Atoi(value)
	if err != nil || wordsPerDay < 1 || wordsPerDay > 100 {
		return c.Send("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤.")
	}

	// Get current user progress
	userProgress, err := s.GetUserProgress(ctx, userID)
	if err != nil {
		s.logger.Error("Failed to get user progress", zap.Error(err))
		return err
	}

	// Update words per day
	userProgress.WordsPerDay = wordsPerDay

	// Save to backend
	if err := s.UpdateUserProgress(ctx, userID, userProgress); err != nil {
		s.logger.Error("Failed to update user progress", zap.Error(err))
		return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// Return to settings with success message
	if err := s.stateManager.SetState(ctx, userID, fsm.StateSettings); err != nil {
		s.logger.Error("Failed to set settings state", zap.Error(err))
		return err
	}

	statusMessage := fmt.Sprintf("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ *%d*", wordsPerDay)
	return s.sendSettingsMessage(ctx, c, userID, userProgress, statusMessage)
}

// HandleSettingsTimeCallback handles notification time selection callbacks
func (s *HandlerService) HandleSettingsTimeCallback(ctx context.Context, c tele.Context, userID int64, data string) error {
	parts := strings.Split(data, ":")
	if len(parts) != 3 {
		return c.Send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
	}

	value := parts[2]

	if value == "custom" {
		// Set state to input mode (direct transition from settings)
		if err := s.stateManager.SetState(ctx, userID, fsm.StateSettingsTimeInput); err != nil {
			s.logger.Error("Failed to set time input state", zap.Error(err))
			return err
		}
		return c.Send("üìù –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):")
	}

	if value == "disabled" {
		// Disable notifications
		userProgress, err := s.GetUserProgress(ctx, userID)
		if err != nil {
			s.logger.Error("Failed to get user progress", zap.Error(err))
			return err
		}

		userProgress.NotificationTime = ""

		// Save to backend
		if err := s.UpdateUserProgress(ctx, userID, userProgress); err != nil {
			s.logger.Error("Failed to update user progress", zap.Error(err))
			return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}

		// Return to settings with success message
		if err := s.stateManager.SetState(ctx, userID, fsm.StateSettings); err != nil {
			s.logger.Error("Failed to set settings state", zap.Error(err))
			return err
		}

		statusMessage := "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã"
		return s.sendSettingsMessage(ctx, c, userID, userProgress, statusMessage)
	}

	// Validate time format
	if !isValidTimeFormat(value) {
		return c.Send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.")
	}

	// Get current user progress
	userProgress, err := s.GetUserProgress(ctx, userID)
	if err != nil {
		s.logger.Error("Failed to get user progress", zap.Error(err))
		return err
	}

	// Update notification time
	userProgress.NotificationTime = value

	// Save to backend
	if err := s.UpdateUserProgress(ctx, userID, userProgress); err != nil {
		s.logger.Error("Failed to update user progress", zap.Error(err))
		return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// Return to settings with success message
	if err := s.stateManager.SetState(ctx, userID, fsm.StateSettings); err != nil {
		s.logger.Error("Failed to set settings state", zap.Error(err))
		return err
	}

	statusMessage := fmt.Sprintf("‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ *%s*", value)
	return s.sendSettingsMessage(ctx, c, userID, userProgress, statusMessage)
}

// HandleSettingsCEFRCallback handles CEFR level selection callbacks
func (s *HandlerService) HandleSettingsCEFRCallback(ctx context.Context, c tele.Context, userID int64, data string) error {
	parts := strings.Split(data, ":")
	if len(parts) != 3 {
		return c.Send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
	}

	value := parts[2]

	if value == "test" {
		// Start CEFR test
		if err := s.stateManager.SetState(ctx, userID, fsm.StateVocabularyTest); err != nil {
			s.logger.Error("Failed to set vocabulary test state", zap.Error(err))
			return err
		}
		return s.HandleTestStartCallback(ctx, c, userID, fsm.StateVocabularyTest)
	}

	if value == "custom" {
		// Set state to input mode (direct transition from settings)
		if err := s.stateManager.SetState(ctx, userID, fsm.StateSettingsCEFRLevel); err != nil {
			s.logger.Error("Failed to set CEFR level input state", zap.Error(err))
			return err
		}
		return c.Send("üìù –í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å CEFR (A1, A2, B1, B2, C1, C2):")
	}

	// Validate CEFR level
	validLevels := map[string]bool{"A1": true, "A2": true, "B1": true, "B2": true, "C1": true, "C2": true}
	if !validLevels[value] {
		return c.Send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å CEFR. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ A1, A2, B1, B2, C1 –∏–ª–∏ C2.")
	}

	// Get current user progress
	userProgress, err := s.GetUserProgress(ctx, userID)
	if err != nil {
		s.logger.Error("Failed to get user progress", zap.Error(err))
		return err
	}

	// Update CEFR level
	userProgress.CEFRLevel = value

	// Save to backend
	if err := s.UpdateUserProgress(ctx, userID, userProgress); err != nil {
		s.logger.Error("Failed to update user progress", zap.Error(err))
		return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// Return to settings with success message
	if err := s.stateManager.SetState(ctx, userID, fsm.StateSettings); err != nil {
		s.logger.Error("Failed to set settings state", zap.Error(err))
		return err
	}

	statusMessage := fmt.Sprintf("‚úÖ –£—Ä–æ–≤–µ–Ω—å CEFR –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *%s*", value)
	return s.sendSettingsMessage(ctx, c, userID, userProgress, statusMessage)
}

// Helper functions

// formatNotificationTime formats notification time string
func formatNotificationTime(timeStr string) string {
	if timeStr == "" {
		return "–û—Ç–∫–ª—é—á–µ–Ω—ã"
	}
	return timeStr
}

// formatCEFRLevel formats CEFR level string
func formatCEFRLevel(level string) string {
	if level == "" {
		return "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
	}
	return level
}

// isValidTimeFormat checks if the time string is in HH:MM format
func isValidTimeFormat(timeStr string) bool {
	if len(timeStr) != 5 || timeStr[2] != ':' {
		return false
	}

	hour, err1 := strconv.Atoi(timeStr[:2])
	minute, err2 := strconv.Atoi(timeStr[3:])

	if err1 != nil || err2 != nil {
		return false
	}

	return hour >= 0 && hour <= 23 && minute >= 0 && minute <= 59
}
