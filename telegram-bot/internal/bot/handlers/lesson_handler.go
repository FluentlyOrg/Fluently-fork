package handlers

import (
	"context"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v3"

	"telegram-bot/internal/bot/fsm"
)

// HandleLearnCommand handles the /learn command with new learning flow
func (s *HandlerService) HandleLearnCommand(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Check if the user has completed the onboarding process
	userProgress, err := s.GetUserProgress(ctx, userID)
	if err != nil {
		s.logger.Error("Failed to get user progress", zap.Error(err))
		return err
	}

	// If user hasn't completed onboarding, prompt them to start
	if userProgress.CEFRLevel == "" {
		startButton := &tele.InlineButton{
			Text: "–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É",
			Data: "onboarding:start",
		}
		keyboard := &tele.ReplyMarkup{
			InlineKeyboard: [][]tele.InlineButton{
				{*startButton},
			},
		}

		return c.Send("–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É. "+
			"–î–∞–≤–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ.", keyboard)
	}

	// Start new learning flow
	return s.HandleNewLearningStart(ctx, c, userID, currentState)
}

// HandleTestCommand handles the /test command
func (s *HandlerService) HandleTestCommand(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Set user state to vocabulary test
	if err := s.stateManager.SetState(ctx, userID, fsm.StateVocabularyTest); err != nil {
		s.logger.Error("Failed to set vocabulary test state", zap.Error(err))
		return err
	}

	// Send test introduction message
	testText := "üß† *–¢–µ—Å—Ç —É—Ä–æ–≤–Ω—è CEFR*\n\n" +
		"–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º —Å–æ–≥–ª–∞—Å–Ω–æ —à–∫–∞–ª–µ CEFR.\n\n" +
		"–í—ã —É–≤–∏–¥–∏—Ç–µ —Å–µ—Ä–∏—é —Å–ª–æ–≤. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ —É–∫–∞–∂–∏—Ç–µ, —Ö–æ—Ä–æ—à–æ –ª–∏ –≤—ã –µ–≥–æ –∑–Ω–∞–µ—Ç–µ.\n\n" +
		"–¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 5 —á–∞—Å—Ç–µ–π –∏ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 5-10 –º–∏–Ω—É—Ç. –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?"

	// Create test keyboard
	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{
				{Text: "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", Data: "test:start"},
				{Text: "–ü–æ–∑–∂–µ", Data: "menu:main"},
			},
		},
	}

	return c.Send(testText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard)
}

// HandleLessonStartCallback handles lesson start callback
func (s *HandlerService) HandleLessonStartCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ù–∞—á–∏–Ω–∞–µ–º —É—Ä–æ–∫...")
}

// HandleLessonLaterCallback handles lesson later callback
func (s *HandlerService) HandleLessonLaterCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–£—Ä–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω.")
}

// HandleTestSkipCallback handles test skip callback
func (s *HandlerService) HandleTestSkipCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Set user to start state (onboarding complete)
	if err := s.stateManager.SetState(ctx, userID, fsm.StateStart); err != nil {
		s.logger.Error("Failed to set start state", zap.Error(err))
		return err
	}

	// Send completion message
	completionText := "üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fluently!*\n\n" +
		"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ.\n\n" +
		"–ò—Å–ø–æ–ª—å–∑—É–π /learn —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫!"

	// Create main menu keyboard
	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{{Text: "–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ", Data: "lesson:start"}},
			{{Text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", Data: "menu:settings"}},
		},
	}

	return c.Send(completionText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard)
}

// HandleWaitingForTranslationMessage handles translation waiting state
func (s *HandlerService) HandleWaitingForTranslationMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥.")
}

// HandleWaitingForAudioMessage handles audio waiting state
func (s *HandlerService) HandleWaitingForAudioMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç.")
}

// HandleAudioExerciseResponse handles audio exercise responses
func (s *HandlerService) HandleAudioExerciseResponse(ctx context.Context, c tele.Context, userID int64, voice interface{}) error {
	return c.Send("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∞—É–¥–∏–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ.")
}

// HandleLearnMenuCallback handles learn menu callback
func (s *HandlerService) HandleLearnMenuCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ú–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è...")
}
