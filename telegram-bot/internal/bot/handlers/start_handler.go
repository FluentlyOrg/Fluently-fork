package handlers

import (
	"context"
	"fmt"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v3"

	"telegram-bot/internal/bot/fsm"
)

// HandleStartCommand handles the /start command
func (s *HandlerService) HandleStartCommand(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Reset user to initial state
	if err := s.stateManager.ResetUserToInitial(ctx, userID); err != nil {
		s.logger.Error("Failed to reset user state", zap.Error(err))
		return err
	}

	// Transition to welcome state
	if err := s.stateManager.SetState(ctx, userID, fsm.StateWelcome); err != nil {
		s.logger.Error("Failed to set welcome state", zap.Error(err))
		return err
	}

	// Send welcome message
	welcomeText := fmt.Sprintf(
		"–ü—Ä–∏–≤–µ—Ç, %s! üëã\n\n"+
			"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ª–µ–≥–∫–æ –∏ –≤–µ—Å–µ–ª–æ!",
		c.Sender().FirstName,
	)

	// Add "Get Started" button
	startBtn := &tele.InlineButton{
		Text: "–ù–∞—á–∞—Ç—å",
		Data: "onboarding:start",
	}
	alreadyHaveAccount := &tele.InlineButton{
		Text: "–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
		Data: "account:link",
	}
	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{*startBtn, *alreadyHaveAccount},
		},
	}

	// Send the message
	if _, err := s.bot.Send(c.Sender(), welcomeText, &tele.SendOptions{ParseMode: tele.ModeMarkdown, ReplyMarkup: keyboard}); err != nil {
		s.logger.Error("Failed to send welcome message", zap.Error(err))
		return err
	}

	// User should now be in StateWelcome, waiting for them to click "–ù–∞—á–∞—Ç—å"
	return nil
}

// HandleHelpCommand handles the /help command
func (s *HandlerService) HandleHelpCommand(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	helpText := "üåü *–°–ø—Ä–∞–≤–∫–∞ –ø–æ Fluently Bot* üåü\n\n" +
		"–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n\n" +
		"*/start* - –ù–∞—á–∞—Ç—å –≤–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞\n" +
		"*/learn* - –ù–∞—á–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —É—Ä–æ–∫\n" +
		"*/settings* - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è\n" +
		"*/test* - –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞\n" +
		"*/stats* - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è\n" +
		"*/help* - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏\n" +
		"*/cancel* - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n" +
		"–ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å."

	return c.Send(helpText, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
}

// HandleCancelCommand handles the /cancel command
func (s *HandlerService) HandleCancelCommand(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Reset user to initial state
	if err := s.stateManager.ResetUserToInitial(ctx, userID); err != nil {
		s.logger.Error("Failed to reset user state", zap.Error(err))
		return err
	}

	// Send cancellation message
	cancelText := "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n" +
		"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."

	return c.Send(cancelText)
}

// HandleWelcomeMessage handles welcome state messages
func (s *HandlerService) HandleWelcomeMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
}

// HandleMethodExplanationMessage handles method explanation state messages
func (s *HandlerService) HandleMethodExplanationMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")
}

// HandleOnboardingStartCallback handles the onboarding start callback
func (s *HandlerService) HandleOnboardingStartCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Validate current state
	if currentState != fsm.StateWelcome {
		s.logger.Warn("Invalid state for onboarding start",
			zap.Int64("user_id", userID),
			zap.String("expected_state", string(fsm.StateWelcome)),
			zap.String("actual_state", string(currentState)))
		return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
	}

	// Transition to method explanation state
	if err := s.stateManager.SetState(ctx, userID, fsm.StateMethodExplanation); err != nil {
		s.logger.Error("Failed to set method explanation state", zap.Error(err))
		return err
	}

	// Send method explanation message
	methodText := "üéØ *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n\n" +
		"‚Ä¢ 10 –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n" +
		"‚Ä¢ –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –Ω—É–∂–Ω—ã–µ —Å–ª–æ–≤–∞\n" +
		"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç\n\n" +
		"–ü—Ä–æ—Å—Ç–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ! üöÄ"

	// Create continue button
	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{{Text: "–ü–æ–Ω—è—Ç–Ω–æ!", Data: "onboarding:method"}},
		},
	}

	return c.Send(methodText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard)
}

// HandleOnboardingMethodCallback handles the transition from method explanation to spaced repetition
func (s *HandlerService) HandleOnboardingMethodCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Validate current state
	if currentState != fsm.StateMethodExplanation {
		s.logger.Warn("Invalid state for method callback",
			zap.Int64("user_id", userID),
			zap.String("expected_state", string(fsm.StateMethodExplanation)),
			zap.String("actual_state", string(currentState)))
		return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
	}

	// Transition to spaced repetition explanation state
	if err := s.stateManager.SetState(ctx, userID, fsm.StateSpacedRepetition); err != nil {
		s.logger.Error("Failed to set spaced repetition state", zap.Error(err))
		return err
	}

	// Send spaced repetition explanation message
	spacedRepetitionText := "üß† *–°–µ–∫—Ä–µ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n" +
		"–ü–æ–∫–∞–∑—ã–≤–∞—é —Å–ª–æ–≤–æ –∏–º–µ–Ω–Ω–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ —Ç—ã –µ–≥–æ –ø–æ—á—Ç–∏ –∑–∞–±—ã–ª.\n\n" +
		"–¢–∞–∫ —Ç–≤–æ–π –º–æ–∑–≥ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –Ω–∞–≤—Å–µ–≥–¥–∞! üí°"

	// Create continue button
	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{{Text: "–ö—Ä—É—Ç–æ! –î–∞–ª—å—à–µ", Data: "onboarding:questionnaire"}},
		},
	}

	return c.Send(spacedRepetitionText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard)
}

// HandleOnboardingQuestionnaireCallback handles the transition to questionnaire
func (s *HandlerService) HandleOnboardingQuestionnaireCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Validate current state
	if currentState != fsm.StateSpacedRepetition {
		s.logger.Warn("Invalid state for questionnaire callback",
			zap.Int64("user_id", userID),
			zap.String("expected_state", string(fsm.StateSpacedRepetition)),
			zap.String("actual_state", string(currentState)))
		return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
	}

	// Transition to questionnaire state
	if err := s.stateManager.SetState(ctx, userID, fsm.StateQuestionnaire); err != nil {
		s.logger.Error("Failed to set questionnaire state", zap.Error(err))
		return err
	}

	// Send questionnaire introduction message
	questionnaireText := "üìã *–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ*\n\n" +
		"–ü–∞—Ä—É –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å —É—Ä–æ–∫–∏ –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è.\n\n" +
		"–ó–∞–π–º–µ—Ç 1 –º–∏–Ω—É—Ç—É üïê"

	// Create continue button
	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{{Text: "–ü–æ–µ—Ö–∞–ª–∏!", Data: "questionnaire:start"}},
		},
	}

	return c.Send(questionnaireText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard)
}

// HandleAccountLinkCallback handles account linking callback
func (s *HandlerService) HandleAccountLinkCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–ª—É—á–µ–Ω callback –∞–∫–∫–∞—É–Ω—Ç–∞.")
}

// HandleMainMenuCallback handles main menu callback
func (s *HandlerService) HandleMainMenuCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
}

// HandleHelpMenuCallback handles help menu callback
func (s *HandlerService) HandleHelpMenuCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ú–µ–Ω—é –ø–æ–º–æ—â–∏...")
}

// HandleUnknownStateMessage handles unknown state messages
func (s *HandlerService) HandleUnknownStateMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –¥–µ–ª–∞—Ç—å –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
}

// HandleUnknownCallback handles unknown callbacks
func (s *HandlerService) HandleUnknownCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback.")
}
