package handlers

import (
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v3"

	"telegram-bot/internal/bot/fsm"
)

// HandleLessonCallback handles lesson-related callbacks
func (s *HandlerService) HandleLessonCallback(ctx context.Context, c tele.Context, userID int64, action string) error {
	switch action {
	case "start_word_set":
		return s.HandleStartWordSet(ctx, c, userID, fsm.StateShowingWordSet)
	case "continue":
		// Resume lesson from current state
		return s.HandleStartWordSet(ctx, c, userID, fsm.StateShowingWordSet)
	case "restart":
		// Clear progress and start new
		if err := s.stateManager.ClearLessonProgress(ctx, userID); err != nil {
			s.logger.Error("Failed to clear lesson progress", zap.Error(err))
		}
		return s.HandleNewLearningStart(ctx, c, userID, fsm.StateStart)
	case "ready_exercises":
		return s.HandleReadyForExercises(ctx, c, userID)
	case "start_exercises":
		return s.HandleStartExercises(ctx, c, userID)
	case "stats":
		return s.handleLessonStats(ctx, c, userID)
	case "final_stats":
		return s.handleFinalStats(ctx, c, userID)
	case "new":
		return s.HandleNewLearningStart(ctx, c, userID, fsm.StateStart)
	default:
		// Handle show_word callbacks with index
		if strings.HasPrefix(action, "show_word:") {
			indexStr := strings.TrimPrefix(action, "show_word:")
			wordIndex, err := strconv.Atoi(indexStr)
			if err != nil {
				return err
			}
			return s.HandleShowWord(ctx, c, userID, wordIndex)
		}
		return c.Send("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
	}
}

// HandleExerciseCallback handles exercise-related callbacks
func (s *HandlerService) HandleExerciseCallback(ctx context.Context, c tele.Context, userID int64, action string) error {
	switch {
	case action == "next":
		return s.HandleExerciseNext(ctx, c, userID)
	case action == "skip":
		return s.HandleSkipExercise(ctx, c, userID)
	case action == "hint":
		return s.HandleExerciseHint(ctx, c, userID)
	case strings.HasPrefix(action, "pick_option:"):
		// Format: pick_option:index:option
		parts := strings.Split(action, ":")
		if len(parts) != 3 {
			return c.Send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
		}

		optionIndex, err := strconv.Atoi(parts[1])
		if err != nil {
			return err
		}

		selectedOption := parts[2]
		return s.HandlePickOptionAnswer(ctx, c, userID, optionIndex, selectedOption)
	case strings.HasPrefix(action, "translate_option:"):
		// Format: translate_option:index:option
		parts := strings.Split(action, ":")
		if len(parts) != 3 {
			return c.Send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
		}

		optionIndex, err := strconv.Atoi(parts[1])
		if err != nil {
			return err
		}

		selectedOption := parts[2]
		return s.HandlePickOptionAnswer(ctx, c, userID, optionIndex, selectedOption)
	default:
		return c.Send("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
	}
}

// HandleAuthCallback handles authentication-related callbacks
func (s *HandlerService) HandleAuthCallback(ctx context.Context, c tele.Context, userID int64, action string) error {
	switch action {
	case "check_link":
		return s.handleCheckLinkStatus(ctx, c, userID)
	default:
		return c.Send("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
	}
}

// HandleVoiceCallback handles voice-related callbacks
func (s *HandlerService) HandleVoiceCallback(ctx context.Context, c tele.Context, userID int64, action string) error {
	if strings.HasPrefix(action, "repeat:") {
		word := strings.TrimPrefix(action, "repeat:")
		return s.sendWordVoiceMessage(ctx, c, word)
	}

	return c.Send("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞")
}

// handleLessonStats shows current lesson statistics
func (s *HandlerService) handleLessonStats(ctx context.Context, c tele.Context, userID int64) error {
	progress, err := s.stateManager.GetLessonProgress(ctx, userID)
	if err != nil || progress == nil {
		return c.Send("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ä–æ–∫–∞")
	}

	learnedCount := progress.LearnedCount
	targetCount := progress.LessonData.Lesson.WordsPerLesson
	duration := s.formatDuration(time.Since(progress.StartTime))

	correctWords := 0
	totalWords := len(progress.WordsLearned)
	for _, wordProgress := range progress.WordsLearned {
		if wordProgress.ConfidenceScore > 0 {
			correctWords++
		}
	}

	var accuracy float64
	if totalWords > 0 {
		accuracy = float64(correctWords) / float64(totalWords) * 100
	}

	statsText := fmt.Sprintf(
		"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Ä–æ–∫–∞*\n\n"+
			"üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å: %d/%d —Å–ª–æ–≤\n"+
			"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: %d –∏–∑ %d\n"+
			"üìà –¢–æ—á–Ω–æ—Å—Ç—å: %.1f%%\n"+
			"‚è± –í—Ä–µ–º—è: %s\n"+
			"üìö –¢–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä: #%d",
		learnedCount,
		targetCount,
		correctWords,
		totalWords,
		accuracy,
		duration,
		progress.CurrentSetIndex,
	)

	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{
				{Text: "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Ä–æ–∫", Data: "lesson:continue"},
			},
		},
	}

	return c.Send(statsText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard)
}

// handleFinalStats shows final lesson statistics
func (s *HandlerService) handleFinalStats(ctx context.Context, c tele.Context, userID int64) error {
	progress, err := s.stateManager.GetLessonProgress(ctx, userID)
	if err != nil || progress == nil {
		return c.Send("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º —É—Ä–æ–∫–µ")
	}

	totalWords := len(progress.WordsLearned)
	correctWords := 0
	for _, wordProgress := range progress.WordsLearned {
		if wordProgress.ConfidenceScore > 0 {
			correctWords++
		}
	}

	duration := s.formatDuration(time.Since(progress.StartTime))
	accuracy := float64(correctWords) / float64(totalWords) * 100

	// Show learned words
	var learnedWordsText strings.Builder
	learnedWordsText.WriteString("üìö *–ò–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:*\n")

	for _, wordProgress := range progress.WordsLearned {
		if wordProgress.ConfidenceScore > 0 {
			learnedWordsText.WriteString(fmt.Sprintf("‚úÖ %s\n", wordProgress.Word))
		} else {
			learnedWordsText.WriteString(fmt.Sprintf("‚ùå %s\n", wordProgress.Word))
		}
	}

	finalStatsText := fmt.Sprintf(
		"üèÜ *–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"+
			"‚úÖ –°–ª–æ–≤ –≤—ã—É—á–µ–Ω–æ: %d\n"+
			"üéØ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: %d –∏–∑ %d\n"+
			"üìà –¢–æ—á–Ω–æ—Å—Ç—å: %.1f%%\n"+
			"‚è± –í—Ä–µ–º—è —É—Ä–æ–∫–∞: %s\n\n"+
			"%s",
		progress.LearnedCount,
		correctWords,
		totalWords,
		accuracy,
		duration,
		learnedWordsText.String(),
	)

	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{
				{Text: "üöÄ –ù–æ–≤—ã–π —É—Ä–æ–∫", Data: "lesson:new"},
				{Text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", Data: "menu:main"},
			},
		},
	}

	return c.Send(finalStatsText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard)
}

// handleCheckLinkStatus checks if user's Google account is linked
func (s *HandlerService) handleCheckLinkStatus(ctx context.Context, c tele.Context, userID int64) error {
	linkStatus, err := s.apiClient.CheckLinkStatus(ctx, userID)
	if err != nil {
		s.logger.Error("Failed to check link status", zap.Error(err))
		return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑–∏")
	}

	if !linkStatus.IsLinked {
		return c.Send("üîó –ê–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ —Å–≤—è–∑–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ.")
	}

	// Store JWT token if available
	// Note: You would typically get the JWT token from the link status response
	// For now, we'll assume the token is available from a separate authentication flow

	return c.Send("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /learn –¥–ª—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞.")
}

// handleHelpAuth provides help information about authentication
func (s *HandlerService) handleHelpAuth(ctx context.Context, c tele.Context, userID int64) error {
	helpText := "‚ùì *–ü–æ–º–æ—â—å –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏*\n\n" +
		"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º Google.\n\n" +
		"*–®–∞–≥–∏:*\n" +
		"1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n" +
		"2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Google\n" +
		"3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é\n" +
		"4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å\"\n\n" +
		"*–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*\n" +
		"‚Ä¢ –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ –ø–∞—Ä–æ–ª–∏\n" +
		"‚Ä¢ –î–æ—Å—Ç—É–ø –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è\n" +
		"‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è"

	return c.Send(helpText, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
}
