services:
  backend:
    image: docker.io/fluentlyorg/fluently-backend:latest-develop
    container_name: fluently_backend
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME:-fluently_db}
      REDIS_ADDR: redis:6379
      PUBLIC_URL: https://${DOMAIN:-localhost}
      ZEROTIER_IP: ${ZEROTIER_IP}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - fluently_network
    ports:
      - "127.0.0.1:8070:8070"
      - "${ZEROTIER_IP}:8070:8070"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8070/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  telegram-bot:
    image: docker.io/fluentlyorg/fluently-telegram-bot:latest-develop
    container_name: fluently_telegram_bot
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
      WEBHOOK_URL: https://${DOMAIN:-localhost}/webhook
      REDIS_ADDR: redis:6379
      BACKEND_URL: http://backend:8070
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - fluently_network

  ml-api:
    image: docker.io/fluentlyorg/fluently-ml-api:latest-develop
    container_name: fluently_ml_api
    restart: unless-stopped
    networks:
      - fluently_network
    ports:
      - "127.0.0.1:8001:8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 180s

  nginx:
    image: docker.io/fluentlyorg/fluently-nginx:latest-develop
    container_name: fluently_nginx
    environment:
      DOMAIN: ${DOMAIN:-localhost}
      CERT_NAME: ${CERT_NAME:-localhost}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    volumes:
      - /etc/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - fluently_network

  postgres:
    image: postgres:15-alpine
    container_name: fluently_postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-fluently_db}
    volumes:
      - fluently_postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - fluently_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: fluently_redis
    restart: unless-stopped
    networks:
      - fluently_network
    volumes:
      - fluently_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  fluently_postgres_data:
    external: true
  fluently_redis_data:
    external: true

networks:
  fluently_network:
    driver: bridge
