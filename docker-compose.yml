services:
  # ===========================================
  # CORE APPLICATION SERVICES
  # ===========================================
  
  # Main Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        SWAGGER_HOST: ${SWAGGER_HOST:-${ZEROTIER_IP:-10.243.92.227}:8070}
    container_name: fluently_backend
    env_file: ./backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      ml-api:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - fluently_network
    ports:
      - "127.0.0.1:8070:8070"  # Local access for nginx
      - "${ZEROTIER_IP:-10.243.92.227}:8070:8070"  # ZeroTier access

  # Nginx Reverse Proxy
  nginx:
    build:
      context: .
      dockerfile: backend/nginx-container/Dockerfile
    container_name: fluently_nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    volumes:
      # Generated config from template
      - ./backend/nginx-container/default.conf:/etc/nginx/conf.d/default.conf:ro
      # Cloudflare Origin Certificates
      - /etc/nginx/ssl:/etc/nginx/ssl:ro
      # Website content
      - ./frontend-website:/usr/share/nginx/html/main-site:ro
    networks:
      - fluently_network

  # ===========================================
  # DATABASE SERVICES
  # ===========================================
  
  # Main PostgreSQL Database
  postgres:
    image: postgres:latest
    container_name: fluently_postgres
    env_file: ./backend/.env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - fluently_pgdata:/var/lib/postgresql/data/pgdata
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    networks:
      - fluently_network 
    ports:
      - "127.0.0.1:5432:5432"  # Local access for docker services
      - "${ZEROTIER_IP:-10.243.92.227}:5432:5432"  # ZeroTier access

  # Redis for Telegram Bot
  # redis:
  #   image: redis:7-alpine
  #   container_name: fluently_redis
  #   restart: unless-stopped
  #   volumes:
  #     - fluently_redis_data:/data
  #   networks:
  #     - fluently_network
  #   command: redis-server --appendonly yes
    # No external ports - internal communication only

  # ===========================================
  # APPLICATION SERVICES
  # ===========================================
  
  # Telegram Bot
  # telegram-bot:
  #   build:
  #     context: ./telegram-bot
  #     dockerfile: Dockerfile
  #   container_name: fluently_telegram_bot
  #   restart: unless-stopped
  #   env_file: ./telegram-bot/.env
  #   depends_on:
  #     - redis
  #     - backend
  #   networks:
  #     - fluently_network
  #   # External access for webhook if needed
  #   ports:
  #     - "${ZEROTIER_IP:-10.243.92.227}:8080:8080"  # ZeroTier access for webhooks

  # ML Distractor API (Internal only)
  ml-api:
    build:
      context: ./analysis
      dockerfile: distractor_api/Dockerfile
    container_name: fluently_ml_api
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    volumes:
      # Shared model cache
      - fluently_model_cache:/app/.cache/huggingface
      # Service-specific logs
      - ./analysis/distractor_api/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    networks:
      - fluently_network
    # No external ports - backend access only via internal network

  # ===========================================
  # ADMIN & MANAGEMENT
  # ===========================================
  
  # Directus CMS
  directus:
    image: directus/directus:latest
    container_name: fluently_directus
    restart: unless-stopped
    env_file: ./backend/.env
    environment:
      SECRET: ${DIRECTUS_SECRET_KEY}
      KEY: ${DIRECTUS_SECRET_KEY}
      ADMIN_EMAIL: ${DIRECTUS_ADMIN_EMAIL}
      ADMIN_PASSWORD: ${DIRECTUS_ADMIN_PASSWORD}
      DB_CLIENT: pg
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      PORT: 8055
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fluently_network
    ports:
      - "127.0.0.1:8055:8055"  # Local access for nginx
      - "${ZEROTIER_IP:-10.243.92.227}:8055:8055"  # ZeroTier access

  # ===========================================
  # MONITORING STACK
  # ===========================================
  
  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: fluently_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./backend/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./backend/monitoring/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - fluently_prometheus_data:/prometheus
    ports:
      - "${ZEROTIER_IP:-10.243.92.227}:9090:9090"  # ZeroTier access only
    networks:
      - fluently_network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: fluently_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - fluently_grafana_data:/var/lib/grafana
      - ./backend/monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./backend/monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./backend/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "${ZEROTIER_IP:-10.243.92.227}:3000:3000"  # ZeroTier access only
    depends_on:
      - prometheus
    networks:
      - fluently_network

  # Loki
  loki:
    image: grafana/loki:latest
    container_name: fluently_loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./backend/monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml
      - fluently_loki_data:/loki
    ports:
      - "${ZEROTIER_IP:-10.243.92.227}:3100:3100"  # ZeroTier access only
    networks:
      - fluently_network

  # Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: fluently_promtail
    restart: unless-stopped
    volumes:
      - ./backend/monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - fluently_network

  # ===========================================
  # CODE QUALITY & ANALYSIS
  # ===========================================
  
  # SonarQube
  sonarqube:
    image: sonarqube:community
    container_name: fluently_sonarqube
    restart: unless-stopped
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/${DB_NAME}
      - SONAR_JDBC_USERNAME=${DB_USER}
      - SONAR_JDBC_PASSWORD=${DB_PASSWORD}
    volumes:
      - fluently_sonarqube_data:/opt/sonarqube/data
      - fluently_sonarqube_extensions:/opt/sonarqube/extensions
      - fluently_sonarqube_logs:/opt/sonarqube/logs
      - ./backend/sonarqube/sonar.properties:/opt/sonarqube/conf/sonar.properties
    ports:
      - "${ZEROTIER_IP:-10.243.92.227}:9000:9000"  # ZeroTier access only
    depends_on:
      - postgres
    networks:
      - fluently_network

  # ===========================================
  # METRICS EXPORTERS
  # ===========================================
  
  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: fluently_node_exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "${ZEROTIER_IP:-10.243.92.227}:9100:9100"  # ZeroTier access only
    networks:
      - fluently_network

  # PostgreSQL Exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: fluently_postgres_exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?sslmode=disable"
    ports:
      - "${ZEROTIER_IP:-10.243.92.227}:9187:9187"  # ZeroTier access only
    depends_on:
      - postgres
    networks:
      - fluently_network

  # Nginx Exporter for web server metrics
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: fluently_nginx_exporter
    restart: unless-stopped
    command:
      - '-nginx.scrape-uri=http://nginx:80/nginx_status'
    ports:
      - "${ZEROTIER_IP:-10.243.92.227}:9113:9113"  # ZeroTier access only
    depends_on:
      - nginx
    networks:
      - fluently_network

  # cAdvisor for Docker container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: fluently_cadvisor
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    ports:
      - "${ZEROTIER_IP:-10.243.92.227}:8044:8044"  # ZeroTier access only
    networks:
      - fluently_network

# ===========================================
# VOLUMES
# ===========================================

volumes:
  # Backend-specific volumes (kept separate)
  fluently_pgdata:
  
  # Shared cache volumes
  fluently_model_cache:
  fluently_redis_data:
  
  # Monitoring volumes
  fluently_prometheus_data:
  fluently_grafana_data:
  fluently_loki_data:
  
  # SonarQube volumes
  fluently_sonarqube_data:
  fluently_sonarqube_extensions:
  fluently_sonarqube_logs:

# ===========================================
# NETWORKS
# ===========================================

networks:
  fluently_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16 